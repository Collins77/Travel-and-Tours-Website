{"ast":null,"code":"import PropTypes from \"prop-types\";\nimport React, { useCallback, useLayoutEffect, useEffect, useMemo, useState } from \"react\";\nvar DEFAULT_COLUMNS_COUNT = 1;\nvar useIsomorphicLayoutEffect = typeof window !== \"undefined\" ? useLayoutEffect : useEffect;\nvar useHasMounted = function useHasMounted() {\n  var _useState = useState(false),\n    hasMounted = _useState[0],\n    setHasMounted = _useState[1];\n  useIsomorphicLayoutEffect(function () {\n    setHasMounted(true);\n  }, []);\n  return hasMounted;\n};\nvar useWindowWidth = function useWindowWidth() {\n  var hasMounted = useHasMounted();\n  var _useState2 = useState(0),\n    width = _useState2[0],\n    setWidth = _useState2[1];\n  var handleResize = useCallback(function () {\n    if (!hasMounted) return;\n    setWidth(window.innerWidth);\n  }, [hasMounted]);\n  useIsomorphicLayoutEffect(function () {\n    if (hasMounted) {\n      window.addEventListener(\"resize\", handleResize);\n      handleResize();\n      return function () {\n        return window.removeEventListener(\"resize\", handleResize);\n      };\n    }\n  }, [hasMounted, handleResize]);\n  return width;\n};\nvar MasonryResponsive = function MasonryResponsive(_ref) {\n  var _ref$columnsCountBrea = _ref.columnsCountBreakPoints,\n    columnsCountBreakPoints = _ref$columnsCountBrea === void 0 ? {\n      350: 1,\n      750: 2,\n      900: 3\n    } : _ref$columnsCountBrea,\n    children = _ref.children,\n    _ref$className = _ref.className,\n    className = _ref$className === void 0 ? null : _ref$className,\n    _ref$style = _ref.style,\n    style = _ref$style === void 0 ? null : _ref$style;\n  var windowWidth = useWindowWidth();\n  var columnsCount = useMemo(function () {\n    var breakPoints = Object.keys(columnsCountBreakPoints).sort(function (a, b) {\n      return a - b;\n    });\n    var count = breakPoints.length > 0 ? columnsCountBreakPoints[breakPoints[0]] : DEFAULT_COLUMNS_COUNT;\n    breakPoints.forEach(function (breakPoint) {\n      if (breakPoint < windowWidth) {\n        count = columnsCountBreakPoints[breakPoint];\n      }\n    });\n    return count;\n  }, [windowWidth, columnsCountBreakPoints]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: className,\n    style: style\n  }, React.Children.map(children, function (child, index) {\n    return React.cloneElement(child, {\n      key: index,\n      columnsCount: columnsCount\n    });\n  }));\n};\nMasonryResponsive.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,\n  columnsCountBreakPoints: PropTypes.object,\n  className: PropTypes.string,\n  style: PropTypes.object\n} : {};\nexport default MasonryResponsive;","map":null,"metadata":{},"sourceType":"module"}